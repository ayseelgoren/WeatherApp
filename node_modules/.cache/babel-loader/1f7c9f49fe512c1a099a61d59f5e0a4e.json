{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ayse.elgoren\\\\Desktop\\\\React\\\\weather-app\\\\src\\\\Components\\\\Weather.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useWeather } from \"../Context/WeatherContext\";\nimport axios from \"axios\";\nimport { Card } from \"react-bootstrap\";\nimport { useCity } from \"../Context/CityContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Weather() {\n  _s();\n\n  const {\n    weathers,\n    setWeathers\n  } = useWeather();\n  const {\n    city\n  } = useCity();\n  console.log(\"render weather\");\n  getCoordinate();\n\n  const getCoordinate = async () => {\n    await axios(`https://api.openweathermap.org/data/2.5/weather?q=${city}&lang=tr&appid=4c87fdde1f3bfe4993325a6ae948e319`).then(res => {\n      getWeatherData(res.data.coord.lon, res.data.coord.lat);\n    });\n  };\n\n  const getWeatherData = async (lon, lat) => {\n    await axios(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&units=imperial&exclude=hourly,minutely,current&lang=tr&appid=4c87fdde1f3bfe4993325a6ae948e319`).then(res => {\n      setWeathers(res.data.daily);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [weathers.map((weather, i) => /*#__PURE__*/_jsxDEV(Card, {\n      style: {\n        width: '9.5rem'\n      },\n      children: /*#__PURE__*/_jsxDEV(Card.Body, {\n        children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n          children: [\"   \", new Date(weather.dt * 1000).toLocaleString(\"tr-TR\", {\n            weekday: \"long\"\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(Card.Img, {\n          variant: \"top\",\n          src: \"https://openweathermap.org/img/wn/\" + weather.weather[0].icon + \"@2x.png\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n          children: [weather.temp.day + \"째\", \"\\u2002\", weather.clouds + \"째\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: weather.weather[0].description.toLowerCase()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 25\n      }, this)\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 21\n    }, this)), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Weather, \"5uTvF3VryegkiuUJLSeQSntznbA=\", false, function () {\n  return [useWeather, useCity];\n});\n\n_c = Weather;\nexport default Weather;\n\nvar _c;\n\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"sources":["C:/Users/ayse.elgoren/Desktop/React/weather-app/src/Components/Weather.js"],"names":["React","useEffect","useWeather","axios","Card","useCity","Weather","weathers","setWeathers","city","console","log","getCoordinate","then","res","getWeatherData","data","coord","lon","lat","daily","map","weather","i","width","Date","dt","toLocaleString","weekday","icon","temp","day","clouds","description","toLowerCase"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,UAAR,QAAyB,2BAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,IAAR,QAAmB,iBAAnB;AACA,SAAQC,OAAR,QAAsB,wBAAtB;;;;AAEA,SAASC,OAAT,GAAmB;AAAA;;AACf,QAAM;AAACC,IAAAA,QAAD;AAAWC,IAAAA;AAAX,MAA0BN,UAAU,EAA1C;AACA,QAAM;AAACO,IAAAA;AAAD,MAASJ,OAAO,EAAtB;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACIC,EAAAA,aAAa;;AACjB,QAAMA,aAAa,GAAG,YAAY;AAC9B,UAAMT,KAAK,CAAE,qDAAoDM,IAAK,iDAA3D,CAAL,CACDI,IADC,CACKC,GAAD,IAAS;AACXC,MAAAA,cAAc,CAACD,GAAG,CAACE,IAAJ,CAASC,KAAT,CAAeC,GAAhB,EAAoBJ,GAAG,CAACE,IAAJ,CAASC,KAAT,CAAeE,GAAnC,CAAd;AACH,KAHC,CAAN;AAKH,GAND;;AAQA,QAAMJ,cAAc,GAAG,OAAOG,GAAP,EAAWC,GAAX,KAAmB;AACtC,UAAMhB,KAAK,CAAE,uDAAsDgB,GAAI,QAAOD,GAAI,gGAAvE,CAAL,CACDL,IADC,CACKC,GAAD,IAAS;AACTN,MAAAA,WAAW,CAACM,GAAG,CAACE,IAAJ,CAASI,KAAV,CAAX;AACL,KAHC,CAAN;AAIH,GALD;;AAOA,sBACI;AAAA,eAEKb,QAAQ,CAACc,GAAT,CAAa,CAACC,OAAD,EAASC,CAAT,kBAEN,QAAC,IAAD;AAAc,MAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAArB;AAAA,6BACI,QAAC,IAAD,CAAM,IAAN;AAAA,gCACI,QAAC,IAAD,CAAM,KAAN;AAAA,4BAAgB,IAAIC,IAAJ,CAASH,OAAO,CAACI,EAAR,GAAa,IAAtB,EAA4BC,cAA5B,CAA2C,OAA3C,EAAoD;AAChEC,YAAAA,OAAO,EAAE;AADuD,WAApD,CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAII,QAAC,IAAD,CAAM,GAAN;AAAU,UAAA,OAAO,EAAC,KAAlB;AAAwB,UAAA,GAAG,EAAE,uCAAqCN,OAAO,CAACA,OAAR,CAAgB,CAAhB,EAAmBO,IAAxD,GAA6D;AAA1F;AAAA;AAAA;AAAA;AAAA,gBAJJ,eAMI,QAAC,IAAD,CAAM,IAAN;AAAA,qBACKP,OAAO,CAACQ,IAAR,CAAaC,GAAb,GAAmB,GADxB,YAGKT,OAAO,CAACU,MAAR,GAAiB,GAHtB,eAII;AAAA;AAAA;AAAA;AAAA,kBAJJ,eAKI;AAAA,sBAEKV,OAAO,CAACA,OAAR,CAAgB,CAAhB,EAAmBW,WAAnB,CAA+BC,WAA/B;AAFL;AAAA;AAAA;AAAA;AAAA,kBALJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ,OAAWX,CAAX;AAAA;AAAA;AAAA;AAAA,YAFP,CAFL,eA0BI;AAAA;AAAA;AAAA;AAAA,YA1BJ;AAAA,kBADJ;AA8BH;;GAlDQjB,O;UAC2BJ,U,EACjBG,O;;;KAFVC,O;AAoDT,eAAeA,OAAf","sourcesContent":["import React, {useEffect} from 'react';\r\nimport {useWeather} from \"../Context/WeatherContext\";\r\nimport axios from \"axios\";\r\nimport {Card} from \"react-bootstrap\";\r\nimport {useCity} from \"../Context/CityContext\";\r\n\r\nfunction Weather() {\r\n    const {weathers, setWeathers} = useWeather();\r\n    const {city} = useCity();\r\n    console.log(\"render weather\")\r\n        getCoordinate()\r\n    const getCoordinate = async () => {\r\n        await axios(`https://api.openweathermap.org/data/2.5/weather?q=${city}&lang=tr&appid=4c87fdde1f3bfe4993325a6ae948e319`)\r\n            .then((res) => {\r\n                getWeatherData(res.data.coord.lon,res.data.coord.lat)\r\n            }\r\n        )\r\n    }\r\n\r\n    const getWeatherData = async (lon,lat) => {\r\n        await axios(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&units=imperial&exclude=hourly,minutely,current&lang=tr&appid=4c87fdde1f3bfe4993325a6ae948e319`)\r\n            .then((res) => {\r\n                  setWeathers(res.data.daily)\r\n            })\r\n    }\r\n\r\n    return (\r\n        <>\r\n\r\n            {weathers.map((weather,i)=>(\r\n\r\n                    <Card key={i} style={{ width: '9.5rem' }}>\r\n                        <Card.Body>\r\n                            <Card.Title>   {new Date(weather.dt * 1000).toLocaleString(\"tr-TR\", {\r\n                                weekday: \"long\"\r\n                            })}</Card.Title>\r\n                            <Card.Img variant=\"top\" src={\"https://openweathermap.org/img/wn/\"+weather.weather[0].icon+\"@2x.png\"} />\r\n\r\n                            <Card.Text>\r\n                                {weather.temp.day + \"째\"}\r\n                                &ensp;\r\n                                {weather.clouds + \"째\"}\r\n                                <br/>\r\n                                <span>\r\n\r\n                                    {weather.weather[0].description.toLowerCase()}\r\n                                </span>\r\n\r\n                            </Card.Text>\r\n                        </Card.Body>\r\n                    </Card>\r\n                )\r\n            )}\r\n            <br/>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Weather;"]},"metadata":{},"sourceType":"module"}