{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ayse.elgoren\\\\Desktop\\\\React\\\\weather-app\\\\src\\\\Components\\\\Weather.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useWeather } from \"../Context/WeatherContext\";\nimport axios from \"axios\";\nimport { Button, Card, Col, Row } from \"react-bootstrap\";\nimport { useCity } from \"../Context/CityContext\";\nimport { forEach } from \"react-bootstrap/ElementChildren\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Weather() {\n  _s();\n\n  const {\n    setWeathers\n  } = useWeather();\n  const {\n    city\n  } = useCity();\n  const {\n    days\n  } = useState(7);\n  useEffect(() => {//getCoordinate()\n  }, [city]);\n\n  const getCoordinate = async () => {\n    await axios(`https://api.openweathermap.org/data/2.5/weather?q=${city}&lang=tr&appid=4c87fdde1f3bfe4993325a6ae948e319`).then(res => {\n      console.log(res.data.coord);\n      getWeatherData(res.data.coord.lon, res.data.coord.lat);\n    });\n  };\n\n  const getWeatherData = async (lon, lat) => {\n    await axios(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&exclude=hourly,minutely,current&lang=tr&appid=4c87fdde1f3bfe4993325a6ae948e319`).then(res => {\n      console.log(res.data.daily); //setWeathersList([...weathersList,res.data.daily])\n      //setWeather([...weather,res.data.daily]);\n\n      setWeathers(res.data.daily);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [days.map(i => /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: i\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 32\n    }, this)), /*#__PURE__*/_jsxDEV(Col, {\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        style: {\n          width: '18rem'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Card.Img, {\n          variant: \"top\",\n          src: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n          children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n            children: new Date(Date.now()).getUTCDay()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Card.Title, {\n            children: new Intl.DateTimeFormat('tr-TR', {\n              weekday: 'long'\n            }).format(new Date(Date.now()).getUTCDay())\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n            children: \"Some quick example text to build on the card title and make up the bulk of the card's content.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"primary\",\n            children: \"Go somewhere\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Col, {\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        style: {\n          width: '18rem'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Card.Img, {\n          variant: \"top\",\n          src: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n          children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n            children: new Date(Date.now() + days * 24 * 60 * 60 * 1000).getUTCDay()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Card.Title, {\n            children: new Intl.DateTimeFormat('tr-TR', {\n              weekday: 'long'\n            }).format(new Date(Date.now() + days * 24 * 60 * 60 * 1000)).getUTCDay()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n            children: \"Some quick example text to build on the card title and make up the bulk of the card's content.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"primary\",\n            children: \"Go somewhere\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Weather, \"ZF5gE5TVjfzpQpjjokgNXyO+WZI=\", false, function () {\n  return [useWeather, useCity];\n});\n\n_c = Weather;\nexport default Weather;\n\nvar _c;\n\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"sources":["C:/Users/ayse.elgoren/Desktop/React/weather-app/src/Components/Weather.js"],"names":["React","useEffect","useState","useWeather","axios","Button","Card","Col","Row","useCity","forEach","Weather","setWeathers","city","days","getCoordinate","then","res","console","log","data","coord","getWeatherData","lon","lat","daily","map","i","width","Date","now","getUTCDay","Intl","DateTimeFormat","weekday","format"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport {useWeather} from \"../Context/WeatherContext\";\r\nimport axios from \"axios\";\r\nimport {Button, Card, Col, Row} from \"react-bootstrap\";\r\nimport {useCity} from \"../Context/CityContext\";\r\nimport {forEach} from \"react-bootstrap/ElementChildren\";\r\n\r\nfunction Weather() {\r\n    const { setWeathers} = useWeather();\r\n    const {city} = useCity();\r\n    const {days} = useState(7)\r\n    useEffect(()=>{\r\n        //getCoordinate()\r\n    },[city])\r\n\r\n    const getCoordinate = async () => {\r\n        await axios(`https://api.openweathermap.org/data/2.5/weather?q=${city}&lang=tr&appid=4c87fdde1f3bfe4993325a6ae948e319`)\r\n            .then((res) => {\r\n                console.log(res.data.coord)\r\n                getWeatherData(res.data.coord.lon,res.data.coord.lat)\r\n            }\r\n        )\r\n    }\r\n\r\n    const getWeatherData = async (lon,lat) => {\r\n        await axios(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&exclude=hourly,minutely,current&lang=tr&appid=4c87fdde1f3bfe4993325a6ae948e319`)\r\n            .then((res) => {\r\n                console.log(res.data.daily)\r\n                //setWeathersList([...weathersList,res.data.daily])\r\n                //setWeather([...weather,res.data.daily]);\r\n\r\n                setWeathers(res.data.daily)\r\n\r\n            })\r\n    }\r\n    return (\r\n        <div>\r\n            {\r\n                days.map((i)=>(<h1>{i}</h1>))\r\n            }\r\n            <Col>\r\n                <Card style={{ width: '18rem' }}>\r\n                    <Card.Img variant=\"top\" src=\"\" />\r\n                    <Card.Body>\r\n                        <Card.Title>{new Date(Date.now()).getUTCDay()}</Card.Title>\r\n                        <Card.Title>{new Intl.DateTimeFormat('tr-TR', { weekday: 'long'}).format(new Date(Date.now()).getUTCDay())}</Card.Title>\r\n                        <Card.Text>\r\n                            Some quick example text to build on the card title and make up the bulk of\r\n                            the card's content.\r\n                        </Card.Text>\r\n                        <Button variant=\"primary\">Go somewhere</Button>\r\n                    </Card.Body>\r\n                </Card>\r\n            </Col>\r\n            <Col>\r\n                <Card style={{ width: '18rem' }}>\r\n                    <Card.Img variant=\"top\" src=\"\" />\r\n                    <Card.Body>\r\n                        <Card.Title>{new Date(Date.now()+days*24*60*60*1000).getUTCDay()}</Card.Title>\r\n                        <Card.Title>{new Intl.DateTimeFormat('tr-TR', { weekday: 'long'}).format(new Date(Date.now()+days*24*60*60*1000)).getUTCDay()}</Card.Title>\r\n                        <Card.Text>\r\n                            Some quick example text to build on the card title and make up the bulk of\r\n                            the card's content.\r\n                        </Card.Text>\r\n                        <Button variant=\"primary\">Go somewhere</Button>\r\n                    </Card.Body>\r\n                </Card>\r\n            </Col>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Weather;"]},"metadata":{},"sourceType":"module"}