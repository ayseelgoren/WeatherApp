{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ayse.elgoren\\\\Desktop\\\\Projeler\\\\Patika.dev\\\\weather-app\\\\src\\\\Components\\\\Weather.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useWeather } from \"../Context/WeatherContext\";\nimport axios from \"axios\";\nimport { Card } from \"react-bootstrap\";\nimport { useCity } from \"../Context/CityContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Weather() {\n  _s();\n\n  const {\n    weathers,\n    setWeathers\n  } = useWeather();\n  const {\n    city\n  } = useCity();\n  const [show, setShow] = useState(false);\n  const [lat, setLat] = useState();\n  const [long, setLong] = useState();\n  useEffect(() => {\n    function getCoordinateUrl() {\n      return `https://api.openweathermap.org/data/2.5/weather?q=${city}&lang=tr&appid=4c87fdde1f3bfe4993325a6ae948e319`;\n    }\n\n    async function getCoordinate() {\n      await axios(getCoordinateUrl()).then(res => {\n        setShow(false);\n        setLat(res.data.coord.lat);\n        setLong(res.data.coord.lon); //getWeatherData(res.data.coord.lon, res.data.coord.lat);\n      }).catch(err => {\n        setShow(true);\n      });\n    }\n\n    getCoordinate();\n  }, [city]);\n  useEffect(() => {\n    async function getWeatherData() {\n      await axios(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${long}&units=imperial&exclude=hourly,minutely,current&lang=tr&appid=4c87fdde1f3bfe4993325a6ae948e319`).then(res => {\n        setShow(false);\n        setWeathers(res.data.daily);\n      }).catch(err => {\n        setShow(true);\n      });\n    }\n\n    getWeatherData();\n  }, [setLong, setLat, setWeathers]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [show === true && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert alert-danger\",\n      role: \"alert\",\n      children: \"The request limit has been reached.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this), weathers.map((weather, i) => /*#__PURE__*/_jsxDEV(Card, {\n      style: {\n        width: \"9.5rem\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Card.Body, {\n        children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n          children: [\" \", new Date(weather.dt * 1000).toLocaleString(\"en-EN\", {\n            weekday: \"long\"\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Card.Img, {\n          variant: \"top\",\n          src: \"https://openweathermap.org/img/wn/\" + weather.weather[0].icon + \"@2x.png\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n          children: [weather.temp.day + \"째\", \"\\u2002\", weather.clouds + \"째\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: weather.weather[0].description.toLowerCase()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this)\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Weather, \"F1efYjaoMg/5iv9vLHsqO0JzSU4=\", false, function () {\n  return [useWeather, useCity];\n});\n\n_c = Weather;\nexport default Weather;\n\nvar _c;\n\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"sources":["C:/Users/ayse.elgoren/Desktop/Projeler/Patika.dev/weather-app/src/Components/Weather.js"],"names":["React","useEffect","useState","useWeather","axios","Card","useCity","Weather","weathers","setWeathers","city","show","setShow","lat","setLat","long","setLong","getCoordinateUrl","getCoordinate","then","res","data","coord","lon","catch","err","getWeatherData","daily","map","weather","i","width","Date","dt","toLocaleString","weekday","icon","temp","day","clouds","description","toLowerCase"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useWeather } from \"../Context/WeatherContext\";\r\nimport axios from \"axios\";\r\nimport { Card } from \"react-bootstrap\";\r\nimport { useCity } from \"../Context/CityContext\";\r\n\r\nfunction Weather() {\r\n  const { weathers, setWeathers } = useWeather();\r\n  const { city } = useCity();\r\n  const [show, setShow] = useState(false);\r\n  const [lat, setLat] = useState();\r\n  const [long, setLong] = useState();\r\n\r\n  useEffect(() => {\r\n    function getCoordinateUrl() {\r\n      return `https://api.openweathermap.org/data/2.5/weather?q=${city}&lang=tr&appid=4c87fdde1f3bfe4993325a6ae948e319`;\r\n    }\r\n    async function getCoordinate() {\r\n      await axios(getCoordinateUrl())\r\n        .then((res) => {\r\n          setShow(false);\r\n          setLat(res.data.coord.lat);\r\n          setLong(res.data.coord.lon);\r\n          //getWeatherData(res.data.coord.lon, res.data.coord.lat);\r\n        })\r\n        .catch((err) => {\r\n          setShow(true);\r\n        });\r\n    }\r\n    getCoordinate();\r\n  }, [city]);\r\n\r\n  useEffect(() => {\r\n    async function getWeatherData() {\r\n      await axios(\r\n        `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${long}&units=imperial&exclude=hourly,minutely,current&lang=tr&appid=4c87fdde1f3bfe4993325a6ae948e319`\r\n      )\r\n        .then((res) => {\r\n          setShow(false);\r\n          setWeathers(res.data.daily);\r\n        })\r\n        .catch((err) => {\r\n          setShow(true);\r\n        });\r\n    }\r\n    getWeatherData();\r\n  }, [setLong, setLat, setWeathers]);\r\n\r\n  return (\r\n    <>\r\n      {show === true && (\r\n        <div className=\"alert alert-danger\" role=\"alert\">\r\n          The request limit has been reached.\r\n        </div>\r\n      )}\r\n\r\n      {weathers.map((weather, i) => (\r\n        <Card key={i} style={{ width: \"9.5rem\" }}>\r\n          <Card.Body>\r\n            <Card.Title>\r\n              {\" \"}\r\n              {new Date(weather.dt * 1000).toLocaleString(\"en-EN\", {\r\n                weekday: \"long\",\r\n              })}\r\n            </Card.Title>\r\n            <Card.Img\r\n              variant=\"top\"\r\n              src={\r\n                \"https://openweathermap.org/img/wn/\" +\r\n                weather.weather[0].icon +\r\n                \"@2x.png\"\r\n              }\r\n            />\r\n\r\n            <Card.Text>\r\n              {weather.temp.day + \"째\"}\r\n              &ensp;\r\n              {weather.clouds + \"째\"}\r\n              <br />\r\n              <span>{weather.weather[0].description.toLowerCase()}</span>\r\n            </Card.Text>\r\n          </Card.Body>\r\n        </Card>\r\n      ))}\r\n      <br />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Weather;\r\n"]},"metadata":{},"sourceType":"module"}